services:
  nginx:
    # set name of image:
    image: e-store-image-nginx
    # set name of container
    container_name: e-store-container-nginx
    build:
      # directory where a Dockerfile to build
      context: .docker/nginx
    # host port -> container port
    ports:
      - "80:80"
      - "443:443"
    networks:
      - e-store-network
    depends_on:
      - php
      - rabbitmq
    volumes:
      - ./:/code
      - .docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - .docker/nginx/logs:/var/log/nginx
    restart: always
  php:
    # set name of image:
    image: e-store-image-php
    # set name of container
    container_name: e-store-container-php
    build:
      # directory where a Dockerfile to build
      context: .docker/php
      args:
          - USER_ID=${USER_ID}
          - USER_NAME=${USER_NAME}
          - GROUP_ID=${GROUP_ID}
          - WWW_DATA_GROUP_ID=${WWW_DATA_GROUP_ID}
    networks:
      - e-store-network
    depends_on:
      - mysql
    volumes:
      - ./:/code
      - ./.docker/php/php.ini:/usr/local/etc/php/conf.d/extra-php.ini
    restart: always
    # the directory to be logged in to
    working_dir: /code
    extra_hosts:
        # add extra host host.docker.internal to container (host-gateway is a magic reference of docker to the host's gateway)
        - host.docker.internal:host-gateway
    environment:
        # serverName will be using in IDE settings (for debugging by xdebug)
        - PHP_IDE_CONFIG=serverName=e-store-config-server
  mysql:
    # set name of image:
    image: e-store-image-mysql
    # set name of container
    container_name: e-store-container-mysql
    build:
      # directory where a Dockerfile to build
      context: .docker/mysql
      args:
          - USER_ID=${USER_ID}
          - USER_NAME=${USER_NAME}
          - GROUP_ID=${GROUP_ID}
    # host port -> container port
    ports:
      - "3306:3306"
    networks:
      - e-store-network
    restart: always
    volumes:
      - .docker/mysql/data:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=my-db
      - MYSQL_ROOT_PASSWORD=root
  rabbitmq:
      # set name of image:
      image: e-store-image-rabbitmq
      # set name of container
      container_name: e-store-container-rabbitmq
      build:
          # directory where a Dockerfile to build
          context: .docker/rabbitmq
      # host port -> container port
      ports:
          # rabbitmq management console will be accessible at
          # http://localhost:15672 (inside the host) or
          # http://host-ip:15672 (outside the host):
          - "15672:15672"
      networks:
          - e-store-network
      restart: always
  phpmyadmin:
      # set name of image:
      image: e-store-image-phpmyadmin
      # set name of container
      container_name: e-store-container-phpmyadmin
      build:
          # directory where a Dockerfile to build
          context: .docker/phpmyadmin
      # host port -> container port
      ports:
          - "8080:80"
      environment:
          - PMA_HOST=mysql
      networks:
          - e-store-network
      # start after mysql (but starting after php or web-server containers is not required because phpmyadmin image already contains them)
      depends_on:
          - mysql
      restart: always
networks:
  e-store-network:
    # here may be additional parameters for network (such as driver)
